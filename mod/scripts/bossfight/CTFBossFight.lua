---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by darionco.
--- DateTime: 2021-03-19 2:54 p.m.
---

local CTFBossFightInfo = require('bossfight/CTFBossFightInfo');
local LootDropper = require('components/lootdropper');
local CTF_TEAM_CONSTANTS = require('constants/CTFTeamConstants');
local CTF_RUSH_CONSTANTS = require('constants/CTFRushConstants');

local CTFBossFight = {
    world = nil,
    spawners = {},
    activeFights = {},
    startTime = nil,
}

function CTFBossFight:startUpdating(world)
    self.world = world;
    for _, v in ipairs(CTFBossFightInfo) do
        v._currentWave = 0;
        v._playerDetectionTask = nil;
        v._nextLevelTask = nil;
        v._activeMobs = 0;
        self.world:DoTaskInTime(v.initialDelay, function() self:startFight(v) end);
    end
end

function CTFBossFight:registerSpawner(spawner, id)
    self.spawners[id] = spawner;
end

function CTFBossFight:startFight(data)
    data._playerDetectionTask = self.world:DoPeriodicTask(1, function() self:findNearbyPlayers(data) end);
    self:spawnNextWave(data);
end

function CTFBossFight:spawnNextWave(data)
    data._currentWave = data._currentWave + 1;
    local wave = data.waves[data._currentWave];
    for k, v in pairs(wave.mobs) do
        local spawner = self.spawners[k];
        if spawner then
            local mobs = self:spawnMobs(spawner, v);
            if #mobs > 0 then
                data._activeMobs = data._activeMobs + #mobs;
                for _, mob in pairs(mobs) do
                    -- handle klaus special case
                    if mob.SpawnDeer then
                        mob:SpawnDeer();
                    end
                    mob:ListenForEvent('death', function() self:handleMobDied(mob, data) end);
                end
            end
        end
    end
end

local function NoHoles(pt)
    return not TheWorld.Map:IsPointNearHole(pt);
end
function CTFBossFight:spawnPrefabs(spawner, prefabs)
    -- do an effect or something here
    local x, y, z = spawner.Transform:GetWorldPosition();
    local spawned = {};

    for _, v in ipairs(prefabs) do
        for _ = 1, v.count do
            local offset = FindWalkableOffset(
                    Vector3(x, 0, z),
                    math.random() * PI * 2,
                    0.5,
                    8,
                    false,
                    true,
                    NoHoles,
                    false,
                    false
            ) or { x = math.random() * 10 - 5, y = 0, z = math.random() * 10 - 5 };

            local inst = SpawnPrefab(v.prefab);
            if inst then
                inst.Transform:SetPosition(x + offset.x, 0, z + offset.z);
                table.insert(spawned, inst);
                local fx = SpawnPrefab('collapse_big');
                if fx then
                    fx.Transform:SetPosition(x + offset.x, 0, z + offset.z);
                end
            end
        end
    end

    return spawned;
end

function CTFBossFight:spawnMobs(spawner, mobs)
    return self:spawnPrefabs(spawner, mobs);
end

function CTFBossFight:spawnLoot(id, loot)
    local spawner = self.spawners[id];
    if spawner then
        local dropper = {
            inst = spawner,
            min_speed = 2,
            max_speed = 6,
            y_speed = 20,
            y_speed_variance = 5,
        }
        local pt = Vector3(spawner.Transform:GetWorldPosition());
        for _, v in ipairs(loot) do
            local count = v.count;
            if TheNet:GetServerGameMode() == 'warsak_boss_rush' then
                count = count * CTF_RUSH_CONSTANTS.BOSS_LOOT_MULTIPLIER;
            end
            for _ = 1, count do
                local inst = SpawnPrefab(v.prefab);
                if inst then
                    LootDropper.FlingItem(dropper, inst, pt);
                end
            end
        end
    end
end

function CTFBossFight:handleMobDied(mob, data)
    -- handle klaus special case
    if mob.IsUnchained and not mob:IsUnchained() then
        return;
    end

    data._activeMobs = data._activeMobs - 1;
    if data._activeMobs <= 0 then
        if data._currentWave == 1 and self.startTime == nil and TheNet:GetServerGameMode() == 'warsak_boss_rush' then
            self.startTime = GetTime();
        end
        if data._currentWave == #data.waves then
            self:spawnLoot(data.centerSpawner, data.waves[data._currentWave].loot);
            if TheNet:GetServerGameMode() == 'warsak_boss_rush' then
                local endTime = GetTime();
                TheWorld:PushEvent(CTF_TEAM_CONSTANTS.GAME_ENDED, { time = endTime - self.startTime, name = data.name });
            else
                self:resetFight(data, true);
            end
        else
            data._nextLevelTask = self.world:DoTaskInTime(data.nextWaveDelay, function()
                if data.waves[data._currentWave] then
                    self:spawnLoot(data.centerSpawner, data.waves[data._currentWave].loot);
                    self:spawnNextWave(data);
                else
                    self:resetFight(data, false);
                end
            end);
        end
    end
end

function CTFBossFight:findNearbyPlayers(data)
    local center = self.spawners[data.centerSpawner];
    if center then
        local x, y, z = center.Transform:GetWorldPosition();
        local ents = TheSim:FindEntities(x, y, z, data.islandRadius, { 'player' });
        local hasPlayers = false;
        for _, v in ipairs(ents) do
            if v:IsValid() and not v:IsInLimbo() and v.components and v.components.health and not v.components.health:IsDead() then
                hasPlayers = true;
                break;
            end
        end

        if data._currentWave > 1 and not hasPlayers then

            self:despawnEverything(data);
            self:resetFight(data, false);
        end
    end
end

function CTFBossFight:resetFight(data, playerWon)
    data._currentWave = 0;
    data._activeMobs = 0;

    if data._playerDetectionTask then
        data._playerDetectionTask:Cancel();
        data._playerDetectionTask = nil;
    end

    if data._nextLevelTask then
        data._nextLevelTask:Cancel();
        data._nextLevelTask = nil;
    end

    local coolDown = playerWon and data.playerWonCoolDown or data.playerLostCoolDown;
    self.world:DoTaskInTime(coolDown, function() self:startFight(data) end);
end

function CTFBossFight:despawnEverything(data)
    local center = self.spawners[data.centerSpawner];
    if center then
        local x, y, z = center.Transform:GetWorldPosition();
        local ents = TheSim:FindEntities(x, y, z, data.islandRadius, {}, { 'player' });
        for _, v in ipairs(ents) do
            if v:IsValid() and not v:IsInLimbo() and not v:HasTag('irreplaceable') and
                v.components and (v.components.health or v.components.inventoryitem)
            then
                v:Remove();
            end
        end
    end
end

return CTFBossFight;
