---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by darionco.
--- DateTime: 2021-03-19 2:54 p.m.
---

local require = _G.require;
local CTFBossFightInfo = require('bossfight/CTFBossFightInfo');

local CTFBossFight = {
    world = nil,
    spawners = {},
    activeFights = {},
}

function CTFBossFight:startUpdating(world)
    self.world = world;
    for _, v in ipairs(CTFBossFightInfo) do
        v._currentWave = 0;
        v._playerDetectionTask = nil;
        v._nextLevelTask = nil;
        v._activeMobs = 0;
        self.world:DoTaskInTime(v.initialDelay, function() self:startFight(v) end);
    end
end

function CTFBossFight:registerSpawner(spawner, id)
    self.spawners[id] = spawner;
end

function CTFBossFight:startFight(data)
    data._playerDetectionTask = self.world:DoPeriodicTask(1, function() self:findNearbyPlayers(data) end);
    self:spawnNextWave(data);
end

function CTFBossFight:spawnNextWave(data)
    data._currentWave = data._currentWave + 1;
    local wave = data.waves[data._currentWave];
    for k, v in pairs(wave) do
        local spawner = self.spawners[k];
        if spawner then
            local mobs = self:spawnMobs(spawner, v);
            if #mobs > 0 then
                data._activeMobs = data._activeMobs + #mobs;
                for _, mob in pairs(mobs) do
                    mob:ListenForEvent('death', function() self:handleMobDied(data) end);
                end
            end
        end
    end
end

local function NoHoles(pt)
    return not TheWorld.Map:IsPointNearHole(pt);
end
function CTFBossFight:spawnMobs(spawner, mobs)
    -- do an effect or something here
    local x, y, z = spawner.Transform:GetWorldPosition();
    local offset = FindWalkableOffset(
            Vector3(x, 0, z),
            math.random() * PI * 2,
            0.5 + spawner:GetPhysicsRadius(0),
            8,
            false,
            true,
            NoHoles,
            false,
            false
    );

    local spawned = {};
    for _, v in mobs do
        local mob = SpawnPrefab(v);
        if mob then
            mob.Transform:SetPosition(x + offset.x, 0, z + offset.z);
            table.insert(spawned. child);
        end
    end

    return spawned;
end

function CTFBossFight:handleMobDied(data)
    data._activeMobs = data._activeMobs - 1;
    if data._activeMobs <= 0 then
        if data._currentWave == #data.waves then
            self:spawnLoot(data.waves[data._currentWave].loot);
            self:resetFight(data, true);
        else
            data._nextLevelTask = self.world:DoTaskInTime(data.nextWaveDelay, function()
                self:spawnLoot(data.waves[data._currentWave].loot);
                self:spawnNextWave(data);
            end);
        end
    end
end

function CTFBossFight:findNearbyPlayers(data)
    local center = self.spawners[data.centerSpawner];
    if center then
        local x, y, z = center.Transform:GetWorldPosition();
        local ents = TheSim:FindEntities(x, y, z, data.islandRadius, { 'player' });
        local hasPlayers = false;
        for _, v in ipairs(ents) do
            if v:IsValid() and not v:IsInLimbo() and v.components and v.components.health and not v.components.health:IsDead() then
                hasPlayers = true;
                break;
            end
        end

        if self._currentWave > 1 and not hasPlayers then
            self:despawnEverything(data);
            self:resetFight(data, false);
        end
    end
end

function CTFBossFight:resetFight(data, playerWon)
    data._currentWave = 0;

    if data._playerDetectionTask then
        data._playerDetectionTask:Cancel();
        data._playerDetectionTask = nil;
    end

    if data._nextLevelTask then
        data._nextLevelTask:Cancel();
        data._nextLevelTask = nil;
    end

    local coolDown = playerWon and data.playerWonCoolDown or data.playerLostCoolDown;
    self.world:DoTaskInTime(coolDown, function() self:startFight(data) end);
end

function CTFBossFight:despawnEverything(data)
    local center = self.spawners[data.centerSpawner];
    if center then
        local x, y, z = center.Transform:GetWorldPosition();
        local ents = TheSim:FindEntities(x, y, z, self.islandRadius, {}, { 'player' });
        for _, v in ipairs(ents) do
            if v:IsValid() and not v:IsInLimbo() and not v:HasTag('irreplaceable') and
                v.components and (v.components.health or v.components.inventoryitem)
            then
                v:Remove();
            end
        end
    end
end

return CTFBossFight;
