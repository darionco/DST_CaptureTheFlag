---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by darionco.
--- DateTime: 2021-03-04 4:11 p.m.
---
local require = _G.require;
local ShowWelcomeScreen = require('screens/CTFInstructionsPopup');
local CTF_TEAM_CONSTANTS = require('constants/CTFTeamConstants');
require('teams/CTFTeamManager');
require('teams/CTFTeam');

local CTFTeamPlayer = Class(function(self, inst)
    self.inst = inst;
    self.markerAnchor = nil;
    self.marker = nil;
    self.net = nil;
    self.idTask = nil;

    self:initMarker();

    self.inst:DoTaskInTime(0, function()
        self:initializeNetwork();
    end);

    if TheWorld.ismastersim then
        CTFTeam.setPlayerInvincibility(CTFTeam, self.inst);
    end
end);

function CTFTeamPlayer:initializeNetwork()
    local player = self.inst;
    if player.player_classified then
        self.net = player.player_classified;
        self.net.ctf_spawn_event = net_event(self.net.GUID, 'ctf_spawn_event');
        self.net.ctf_player_health = net_float(self.net.GUID, 'ctf_player_health', 'ctf_player_health');

        if not TheNet:IsDedicated() then
            if player == _G.ThePlayer then
                self.net:ListenForEvent('ctf_spawn_event', function() self:netHandleSpawnedEvent() end);
            end

            self.net:ListenForEvent('ctf_player_health', function() self:netHandleHealthChange() end);
            self.net:ListenForEvent('healthdirty', function() self:netHandleHealthChange(); end);
        end

        if player.components and player.components.health then
            player:ListenForEvent('healthdelta', function(owner, data)
                self.net.ctf_player_health:set(data.newpercent);
            end);
        end

        self.idTask = player:DoPeriodicTask(0.2, function()
            local teamID = CTFTeamManager:getUserTeamID(player.userid);
            if teamID then
                self:setTeamID(teamID);
            end
        end);
    end
end

function CTFTeamPlayer:netHandleSpawnedEvent()
    ShowWelcomeScreen(function()
        SendModRPCToServer(MOD_RPC[CTF_TEAM_CONSTANTS.RPC_NAMESPACE][CTF_TEAM_CONSTANTS.RPC.PLAYER_JOINED_CTF]);
    end);
end

function CTFTeamPlayer:setTeamID(teamID)
    if self.idTask then
        self.idTask:Cancel();
        self.idTask = nil;
    end

    local teamTag = CTFTeam.makeTeamTag(nil, teamID);
    local player = self.inst;

    if not player.data then
        player.data = {};
    end
    player.data.ctf_team_id = teamID;
    player.data.ctf_team_tag = teamTag;

    CTFTeam.patchPlayerController(nil, player, teamTag);
    CTFTeam.patchCombat(nil, player, teamTag);

    if self.marker then
        self.marker.AnimState:SetMultColour(CTFTeam.getTeamColor(nil, teamID));
    end
end

function CTFTeamPlayer:netHandleHealthChange()
    if self.marker then
        local percent = self.net.ctf_player_health:value();
        if not self.inst:HasTag('playerghost') then
            self.marker.AnimState:SetTime(3.61 * (1 - percent));
        else
            self.marker.AnimState:SetTime(3.61);
        end

    end
end

function CTFTeamPlayer:initMarker()
    self.markerAnchor = SpawnPrefab('ctf_team_marker');
    self.markerAnchor.entity:SetParent(self.inst.entity);
    --self.markerAnchor.AnimState:SetScale(0, 0);
    self.markerAnchor.entity:Hide();

    self.marker = SpawnPrefab('ctf_team_marker');
    self.marker.AnimState:PlayAnimation('health');
    self.marker.AnimState:SetDeltaTimeMultiplier(0);
    self.marker.AnimState:SetTime(0);
    self.marker.AnimState:SetScale(-1, 1);

    self.marker.Follower:FollowSymbol(self.markerAnchor.GUID, 'assets', 0, 0, 0);
end

return CTFTeamPlayer;
