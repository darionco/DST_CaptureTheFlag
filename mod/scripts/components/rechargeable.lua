---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by darionco.
--- DateTime: 2021-03-26 9:00 a.m.
---

local Rechargeable = Class(function(self, inst)
    self.inst = inst;
    self.charged = false;
    self.recharge_time = 10; -- seconds
    self.time_start = nil;
    self.time_end = nil;
    self.task = nil;

    self.proxy = nil;
    self.proxyRechargeChange = function()
        self:NotifyRechargeChange();
    end
    self.proxyRechargeTimeChange = function()
        self:NotifyRechargeTimeChange();
    end

    self.startchargingfn = nil;
    self.onchargedfn = nil;
    self.onrechargetimechangefn = nil;
end)

function Rechargeable:OnRemoveFromEntity()
    if self.task ~= nil then
        self.task:Cancel();
        self.task = nil;
    end
end

function Rechargeable:NotifyRechargeChange()
    if self.inst.components.aoetargeting then
        self.inst.components.aoetargeting:SetEnabled(self:IsCharged());
    end
    self.inst:PushEvent('rechargechange', { percent = self:GetPercent()});
end

function Rechargeable:NotifyRechargeTimeChange()
    self.inst:PushEvent('rechargetimechange', { t = self.recharge_time });
end

function Rechargeable:FinishCharging()
    if self.task ~= nil then
        self.task:Cancel();
        self.task = nil;
    end

    self.charged = true;
    self.time_start = nil;
    self.time_end = nil;

    if self.onchargedfn ~= nil then
        self.onchargedfn(self.inst);
    end

    self:NotifyRechargeChange();
end

function Rechargeable:StartRecharge()
    self.charged = false;
    self.time_start = GetTime();
    self.time_end = self.time_start + self.recharge_time;

    if self.task ~= nil then
        self.task:Cancel()
    end
    self.task = self.inst:DoTaskInTime(self.recharge_time, function() self:FinishCharging() end);

    if self.startchargingfn ~= nil then
        self.startchargingfn(self.inst)
    end

    self:NotifyRechargeChange();
end

function Rechargeable:SetRechargeTime(time)
    self.recharge_time = time;

    if self.onrechargetimechangefn then
        self.onrechargetimechangefn(self.inst);
    end

    if not self.proxy then
        self:NotifyRechargeTimeChange();
    end
end

function Rechargeable:SetProxy(proxy)
    if proxy ~= self.proxy then
        if self.proxy then
            self.inst:RemoveEventCallback('rechargechange', self.proxyRechargeChange, self.proxy.inst);
            self.inst:RemoveEventCallback('rechargetimechange', self.proxyRechargeTimeChange, self.proxy.inst);
        end

        self.proxy = proxy;

        if self.proxy then
            self.inst:ListenForEvent('rechargechange', self.proxyRechargeChange, self.proxy.inst);
            self.inst:ListenForEvent('rechargetimechange', self.proxyRechargeTimeChange, self.proxy.inst);
        end
    end

    self:NotifyRechargeTimeChange();
    self:NotifyRechargeChange();
end

function Rechargeable:GetPercent()
    if self.proxy then
        return self.proxy:GetPercent();
    end

    if not self.charged and self.time_start and self.time_end then
        return math.min(1, (GetTime() - self.time_start) / (self.time_end - self.time_start));
    end
    return 1;
end

function Rechargeable:GetRechargeTime()
    if self.proxy then
        return self.proxy:GetRechargeTime();
    end
    return self.recharge_time;
end

function Rechargeable:IsCharged()
    if self.proxy then
        return self.proxy:IsCharged();
    end
    return self.charged;
end

function Rechargeable:IsCharging()
    if self.proxy then
        return self.proxy:IsCharging();
    end
    return not self.charged and self.time_start and self.time_end ~= nil;
end

return Rechargeable

