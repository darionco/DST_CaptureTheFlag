---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by darionco.
--- DateTime: 2021-01-16 4:45 p.m.
---
local require = _G.require;

local CTF_TEAM_CONSTANTS = require('constants/CTFTeamConstants');
modimport('scripts/teams/CTFTeam');

CTFTeamManager = {
    teamCount = 0,
    teams = {},
    userid2teamid = {},
    gameStarted = false,
    gameStartCount = 0,
};

function CTFTeamManager:registerNetEvents(inst)
    self._net_player_event = GLOBAL.net_string(inst.GUID, 'ctf_team_manager_net_player_event', 'ctf_team_manager_net_player_event');
    if not TheNet:IsDedicated() then
        inst:ListenForEvent('ctf_team_manager_net_player_event', function()
            local event = CTFTeamManager._net_player_event:value();
            self:handleNetPlayerEvent(event);
        end);
    end
end

function CTFTeamManager:netUpdateUserTable()
    if self._net_player_event then
        local serialized = '|';
        for k, v in pairs(self.userid2teamid) do
            serialized = serialized .. k .. ':' .. v .. '|';
        end
        self._net_player_event:set(serialized);
    end
end

function CTFTeamManager:handleNetPlayerEvent(event)
    self.userid2teamid = {};
    for pair in string.gmatch(event, '([^|]+)') do
        if pair then
            local userid, teamid = string.match(pair, '(.+):(.+)');
            if userid ~= nil and teamid ~= nil then
                self.userid2teamid[userid] = tonumber(teamid);
            end
        end
    end
end

function CTFTeamManager:getUserTeamID(userid)
    return self.userid2teamid[userid];
end

function CTFTeamManager:registerTeamObject(obj, data)
    if (self.teams[data.ctf_team] == nil) then
        print('Creating CTF team ' .. data.ctf_team);
        table.insert(self.teams, data.ctf_team, CTFTeam(data.ctf_team));
        self.teamCount = self.teamCount + 1;
    end
    self.teams[data.ctf_team]:registerObject(obj, data);
end

function CTFTeamManager:getTeamWithLeastPlayers()
    local minPlayerCount = 9999999;
    local team = nil;
    for _, v in ipairs(self.teams) do
        if v.playerCount < minPlayerCount then
            minPlayerCount = v.playerCount;
            team = v;
        end
    end
    return team;
end

function CTFTeamManager:shouldStartGame()
    -- gameStartCount other than 0 means the game is starting
    if self.gameStarted == false and self.gameStartCount == 0 then
        local totalPlayers = 0;
        for _, v in ipairs(self.teams) do
            totalPlayers = totalPlayers + v.playerCount;
        end
        local minPlayerCount = GetModConfigData('CTF_MIN_PLAYERS_TO_START');
        if totalPlayers >= minPlayerCount then
            return true;
        end
    end
    return false;
end

function CTFTeamManager:gameStartTick()
    if self.gameStartCount > 0 then
        c_announce('Game starting in ' .. self.gameStartCount);
        self.gameStartCount = self.gameStartCount - 1;
        TheWorld:DoTaskInTime(1, function() CTFTeamManager:gameStartTick() end);
    else
        self.gameStartCount = 0;
        self:startGame();
    end
end

function CTFTeamManager:scheduleGameStart()
    if self.gameStarted == false and self.gameStartCount == 0 then
        self.gameStartCount = 5;
        self:gameStartTick();
    end
end

function CTFTeamManager:startGame()
    if self.gameStarted == false and self.gameStartCount == 0 then
        self.gameStarted = true;
        for _, v in ipairs(self.teams) do
            v:teleportAllPlayersToBase();
        end
        TheWorld:PushEvent(CTF_TEAM_CONSTANTS.GAME_STARTED);
    end
end

function CTFTeamManager:getPlayerTeam(player)
    if player.data and player.data.ctf_team_id ~= nil then
        return self.teams[player.data.ctf_team_id];
    end

    for _, v in ipairs(self.teams) do
        if v:hasPlayer(player) then
            return v;
        end
    end
    return nil;
end

function CTFTeamManager:getObjectTeam(obj)
    if obj.data and obj.data.ctf_team_id ~= nil then
        return self.teams[obj.data.ctf_team_id];
    end
    return nil;
end

function CTFTeamManager:registerPlayer(player)
    if TheWorld.ismastersim then
        local team = self:getTeamWithLeastPlayers();
        if not team then
            c_regenerateworld();
        else
            c_announce(player.name .. ' joins team ' .. team.id);
            team:registerPlayer(player);
            team:setPlayerInvincibility(player, true);
            self.userid2teamid[player.userid] = team.id;
            self:netUpdateUserTable();

            if self.gameStarted then
                team:teleportPlayerToBase(player);
            elseif self:shouldStartGame() then
                self:scheduleGameStart();
            end
        end
    end
end

function CTFTeamManager:removePlayer(player)
    for _, v in ipairs(self.teams) do
        v:removePlayer(player);
    end

    if TheWorld.ismastersim then
        self.userid2teamid[player.userid] = nil;
        self:netUpdateUserTable();
    end
end

function CTFTeamManager:findPlayer(prefab, userid)
    for _, v in ipairs(self.teams) do
        local player = v:findPlayer(prefab, userid);
        if player ~= nil then
            return player;
        end
    end
    return nil;
end
