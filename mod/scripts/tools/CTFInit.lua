---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by darionco.
--- DateTime: 2021-03-25 7:55 p.m.
---

-- make sure this is initialized only once since it can be imported using `require` or `use`
local status, imp = pcall(function() return _G._ctf_init_imp end);
if status then
    return imp;
end

local MakePlayerCharacter = require('prefabs/player_common');
local CTFClassPatcher = require('tools/CTFClassPatcher');

local CTFInit = {
    characterPostInitAll = { common = {}, master ={} },
    characterPostInit = {},
    prefabPostInitAll = { common = {}, master = {} },
    prefabPostInit = {},
}

-- this could be optimized, bleh
function CTFInit:RetrieveUpvalues(fn)
    local info = debug.getinfo(fn, 'uS');
    local variables = {}

    -- Upvalues can't be retrieved from C functions
    if info ~= nil and info.what == 'Lua' then
        local upvalues = info.nups;
        for i = 1, upvalues do
            local key, value = debug.getupvalue(fn, i);
            variables[key] = { i = i, v = value };
        end
    end

    return variables
end

function CTFInit:AddEntryToQueue(target, name, common_fn, master_fn)
    if name and not target[name] then
        target[name] = {
            common = {},
            master = {},
        }
    end

    if common_fn then
        if name then
            table.insert(target[name].common, common_fn);
        else
            table.insert(target.common, common_fn);
        end
    end

    if master_fn then
        if name then
            table.insert(target[name].master, master_fn);
        else
            table.insert(target.master, master_fn);
        end
    end
end

function CTFInit:Character(name, common_fn, master_fn)
    if name == nil then
        self:AddEntryToQueue(CTFInit.characterPostInitAll, name, common_fn, master_fn);
    else
        self:AddEntryToQueue(CTFInit.characterPostInit, name, common_fn, master_fn);
    end
end

function CTFInit:AllCharacters(common_fn, master_fn)
    self:Character(nil, common_fn, master_fn);
end

function CTFInit:Prefab(name, common_fn, master_fn)
    if name == nil then
        self:AddEntryToQueue(CTFInit.prefabPostInitAll, name, common_fn, master_fn);
    else
        self:AddEntryToQueue(CTFInit.prefabPostInit, name, common_fn, master_fn);
    end
end

-- WARNING: this includes characters
function CTFInit:AllPrefabs(common_fn, master_fn)
    self:Prefab(nil, common_fn, master_fn);
end

-- patch MakePlayerCharacter
package.loaded['prefabs/player_common'] = function(name, customprefabs, customassets, common_postinit, master_postinit, starting_inventory)
    local oldCommonPostInit = common_postinit;
    local oldMasterPostInit = master_postinit;

    common_postinit = function(inst)
        if oldCommonPostInit then
            oldCommonPostInit(inst);
        end

        for _, v in ipairs(CTFInit.characterPostInitAll.common) do
            v(inst);
        end

        if CTFInit.characterPostInit[name] then
            for _, v in ipairs(CTFInit.characterPostInit[name].common) do
                v(inst);
            end
        end
    end

    master_postinit = function(inst)
        if oldMasterPostInit then
            oldMasterPostInit(inst);
        end

        for _, v in ipairs(CTFInit.characterPostInitAll.master) do
            v(inst);
        end

        if CTFInit.characterPostInit[name] then
            for _, v in ipairs(CTFInit.characterPostInit[name].master) do
                v(inst);
            end
        end
    end

    return MakePlayerCharacter(name, customprefabs, customassets, common_postinit, master_postinit, starting_inventory);
end;

local function patchEntityMethods()
    local inst = CreateEntity('ctf_entity_patcher');
    local meta = getmetatable(inst.entity);

    local OldSetParent = meta.__index.SetParent;
    meta.__index.SetParent = function(self, parent)
        if type(parent) == 'table' then
            parent = parent.__ctf_entity;
        end
        OldSetParent(self, parent);
    end

    inst:Remove();
end
patchEntityMethods();

-- patch prefab class
local function patchPrefabFn(fn, prefab)
    local OldCreateEntity = _G.CreateEntity;
    local prefab_fn_env = {
        CreateEntity = function(name)
            local inst = OldCreateEntity(name);
            -- temporarily replace the entity, it will be restored once SetPristine is called
            local entity = inst.entity;
            local fauxEntity = {
                __ctf_entity = entity,
                SetPristine = function()
                    for _, v in ipairs(CTFInit.prefabPostInitAll.common) do
                        v(inst);
                    end
                    if CTFInit.prefabPostInit[prefab] then
                        for _, v in ipairs(CTFInit.prefabPostInit[prefab].common) do
                            v(inst);
                        end
                    end

                    entity:SetPristine();
                    inst.entity = entity;
                end,
            }

            setmetatable(fauxEntity, {
                __index = function(_, key)
                    if type(entity[key]) == 'function' then
                        return function(_, ...)
                            return entity[key](entity, ...);
                        end
                    end
                    return entity[key];
                end
            })

            inst.entity = fauxEntity;

            return inst;
        end
    }
    setmetatable(prefab_fn_env, { __index = _G, __newindex = _G });
    setfenv(fn, prefab_fn_env);
end

_G.forestCount = 0;
CTFClassPatcher(Prefab, function(self, ctor, name, fn, assets, deps, force_path_search)
    if fn then
        local prefabFn = fn;
        fn = function()
            _G.forestCount = _G.forestCount + 1;
            if name == 'forest' then
                --assert(_G.forestCount < 1, 'first forest');
            end
            patchPrefabFn(prefabFn, name);
            local inst = prefabFn();
            if TheWorld.ismastersim then
                for _, v in ipairs(CTFInit.prefabPostInitAll.master) do
                    v(inst);
                end
                if CTFInit.prefabPostInit[name] then
                    for _, v in ipairs(CTFInit.prefabPostInit[name].master) do
                        v(inst);
                    end
                end
            end

            return inst;
        end
    end
    ctor(self, name, fn, assets, deps, force_path_search);
end);

_G._ctf_init_imp = CTFInit;
return CTFInit;
